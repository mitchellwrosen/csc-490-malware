#include "registry_key.h" 

#include <windows.h>

#include <iostream>

RegistryKey::RegistryKey(string name, HKEY keyHandle) : name_(name) {
  DWORD subKeysCount, valsCount;
  getSubKeysAndValsCounts(key, subKeysCount, valsCount);

  for (int i = 0; i < subKeysCount; ++i) {
    string keyName = getSubKeyName(keyHandle, i);
    RegistryKey* keyVal = new RegistryKey(keyName, keyHandle);
    subKeys_[keyName] = keyVal;
  }

  for (int i = 0; i < valsCount; ++i) {
    string valName;
    vector<BYTE> valVal;

    getValue(keyHandle, i, &valName, &valVal);

    values_[valName] = valVal;
  }
}

// Serializable
void RegistryKey::encode(ostream& outstream) {
  // TODO
}

// Serializable
void RegistryKey::decode(istream& instream) {
  // TODO
}

void RegistryKey::getSubKeysAndValsCounts(
    HKEY    keyHandle,
    LPDWORD subKeysCount,
    LPDWORD valsCount)
{
  WIN_CHECK(RegQueryInfoKey(
      keyHandle,
      NULL,
      NULL,
      NULL,
      subKeysCount,
      NULL,
      NULL,
      valsCount,
      NULL,
      NULL,
      NULL,
      NULL));
}

string RegistryKey::getSubKeyName(HKEY keyHandle, int i) {
  DWORD junk;
  WIN_CHECK(RegEnumKeyEx(
      keyHandle,
      i,
      keyNameBuf_,
      &junk,
      NULL,
      NULL,
      NULL,
      NULL));
  return string(keyNameBuf_);
}

void RegistryKey::getValue(HKEY keyHandle, int i, string* valName, vector<BYTE>* valValue) {
  DWORD valValLen;
  WIN_CHECK(RegEnumValue(
      keyHandle,
      i,
      valNameBuf_,
      NULL,
      NULL,
      NULL,
      valValBuf_,
      &valValLen));

  *valName = string(valNameBuf_);
  *valVal = vector(valValBuf_, valValBuf_ + valValLen);
}
